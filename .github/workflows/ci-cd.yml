name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build and Test the Application
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd webapp
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        cd webapp
        python -m pytest --version || pip install pytest
        python -c "import app; print('App imports successfully')"

  # OWASP Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: "SSD-Practical-Test-2302032"
        path: "."
        format: "HTML"
        out: "dependency-check-report"
        
    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      with:
        name: Dependency-Check-Report
        path: dependency-check-report

  # ESLint Security Scanning
  eslint-security:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create package.json for ESLint
      run: |
        echo '{
          "name": "ssd-practical-test",
          "version": "1.0.0",
          "devDependencies": {
            "eslint": "^8.0.0",
            "eslint-plugin-security": "^1.7.1",
            "eslint-plugin-no-unsanitized": "^4.0.2"
          }
        }' > package.json
        
    - name: Install ESLint and security plugins
      run: |
        npm install
        
    - name: Create ESLint config
      run: |
        echo '{
          "env": {
            "browser": true,
            "es2021": true,
            "node": true
          },
          "extends": [
            "eslint:recommended",
            "plugin:security/recommended",
            "plugin:no-unsanitized/recommended"
          ],
          "plugins": ["security", "no-unsanitized"],
          "rules": {
            "security/detect-object-injection": "error",
            "security/detect-non-literal-regexp": "error",
            "security/detect-unsafe-regex": "error"
          }
        }' > .eslintrc.json
        
    - name: Run ESLint Security Scan
      run: |
        npx eslint . --ext .js --format json --output-file eslint-results.json || true
        npx eslint . --ext .js || true

  # UI Testing with Selenium
  ui-testing:
    runs-on: ubuntu-latest
    needs: build-test
    
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: --shm-size=2gb
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install selenium flask requests
        
    - name: Start Flask application
      run: |
        cd webapp
        python app.py &
        sleep 10
        
    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5000; do sleep 2; done'
        
    - name: Run Selenium UI tests
      run: |
        python -c "
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        import time
        
        # Setup Chrome options
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        
        # Connect to Selenium Grid
        driver = webdriver.Remote(
            command_executor='http://localhost:4444/wd/hub',
            options=chrome_options
        )
        
        try:
            # Test home page
            driver.get('http://localhost:5000')
            print('✓ Home page loads successfully')
            
            # Test search form exists
            search_input = driver.find_element(By.ID, 'search_term')
            submit_button = driver.find_element(By.CSS_SELECTOR, 'input[type=\"submit\"]')
            print('✓ Search form elements found')
            
            # Test normal search
            search_input.clear()
            search_input.send_keys('test search')
            submit_button.click()
            
            # Wait for results page
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, 'h1'))
            )
            assert 'test search' in driver.page_source
            print('✓ Normal search works correctly')
            
            # Test return button
            return_button = driver.find_element(By.TAG_NAME, 'button')
            return_button.click()
            
            # Should be back to home page
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, 'search_term'))
            )
            print('✓ Return to home page works')
            
            # Test XSS prevention
            search_input = driver.find_element(By.ID, 'search_term')
            search_input.clear()
            search_input.send_keys('<script>alert(\"xss\")</script>')
            submit_button = driver.find_element(By.CSS_SELECTOR, 'input[type=\"submit\"]')
            submit_button.click()
            
            # Should stay on home page with error message
            time.sleep(2)
            assert 'XSS attack detected' in driver.page_source
            print('✓ XSS protection works correctly')
            
            print('All UI tests passed!')
            
        finally:
            driver.quit()
        "