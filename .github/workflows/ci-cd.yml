name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build and Test the Application
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd webapp
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        cd webapp
        python -m pytest --version || pip install pytest
        python -c "import app; print('App imports successfully')"

  # OWASP Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: "SSD-Practical-Test-2302032"
        path: "."
        format: "HTML"
        out: "dependency-check-report"
        
    - name: Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      with:
        name: Dependency-Check-Report
        path: dependency-check-report

  # ESLint Security Scanning
  eslint-security:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create package.json for ESLint
      run: |
        echo '{
          "name": "ssd-practical-test",
          "version": "1.0.0",
          "devDependencies": {
            "eslint": "^8.0.0",
            "eslint-plugin-security": "^1.7.1",
            "eslint-plugin-no-unsanitized": "^4.0.2"
          }
        }' > package.json
        
    - name: Install ESLint and security plugins
      run: |
        npm install
        
    - name: Create ESLint config
      run: |
        echo '{
          "env": {
            "browser": true,
            "es2021": true,
            "node": true
          },
          "extends": [
            "eslint:recommended",
            "plugin:security/recommended",
            "plugin:no-unsanitized/recommended"
          ],
          "plugins": ["security", "no-unsanitized"],
          "rules": {
            "security/detect-object-injection": "error",
            "security/detect-non-literal-regexp": "error",
            "security/detect-unsafe-regex": "error"
          }
        }' > .eslintrc.json
        
    - name: Run ESLint Security Scan
      run: |
        npx eslint . --ext .js --format json --output-file eslint-results.json || true
        npx eslint . --ext .js || true

  # UI Testing over HTTP
  ui-testing:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd webapp
        pip install -r requirements.txt
        pip install requests pytest
        
    - name: Start Flask application in background
      run: |
        cd webapp
        nohup python app.py &
        echo $! > flask.pid
        
    - name: Wait for application to start
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:5000 >/dev/null 2>&1; then
            echo "Application is ready"
            break
          fi
          echo "Waiting for application... ($i/30)"
          sleep 2
        done
        
    - name: Test HTTP endpoints
      run: |
        # Test home page
        curl -f http://localhost:5000
        echo "✓ Home page accessible"
        
        # Test form submission with valid input
        curl -X POST -d "search_term=hello world" http://localhost:5000
        echo "✓ Form submission works"
        
        # Test XSS protection
        response=$(curl -X POST -d "search_term=<script>alert('xss')</script>" http://localhost:5000)
        if echo "$response" | grep -q "XSS attack detected"; then
          echo "✓ XSS protection works"
        else
          echo "✗ XSS protection failed"
          exit 1
        fi
        
        # Test SQL injection protection
        response=$(curl -X POST -d "search_term='; DROP TABLE users; --" http://localhost:5000)
        if echo "$response" | grep -q "SQL injection"; then
          echo "✓ SQL injection protection works"
        else
          echo "✗ SQL injection protection failed"
          exit 1
        fi
        
        echo "All HTTP tests passed!"
        
    - name: Stop Flask application
      run: |
        if [ -f webapp/flask.pid ]; then
          kill $(cat webapp/flask.pid) || true
        fi